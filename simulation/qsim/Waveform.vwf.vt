// Copyright (C) 2020  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "06/30/2022 17:19:54"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          EV22G5
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module EV22G5_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk0;
reg clk1;
reg clk_input;
// wires                                               
wire [15:0] AlatchOut;
wire [3:0] AluIn;
wire [15:0] BlatchOut;
wire [4:0] busAout;
wire [5:0] busBout;
wire [5:0] busC;
wire clk;
wire [23:0] instruction;
wire [15:0] PO0;
wire regRead;
wire regwrite;
wire [15:0] SalidaALU;
wire [15:0] WRcurrent;
wire WRread;
wire WRwriteout;

// assign statements (if any)                          
EV22G5 i1 (
// port map - connection between master ports and signals/registers   
	.AlatchOut(AlatchOut),
	.AluIn(AluIn),
	.BlatchOut(BlatchOut),
	.busAout(busAout),
	.busBout(busBout),
	.busC(busC),
	.clk(clk),
	.clk0(clk0),
	.clk1(clk1),
	.clk_input(clk_input),
	.instruction(instruction),
	.PO0(PO0),
	.regRead(regRead),
	.regwrite(regwrite),
	.SalidaALU(SalidaALU),
	.WRcurrent(WRcurrent),
	.WRread(WRread),
	.WRwriteout(WRwriteout)
);
initial 
begin 
#50000000 $finish;
end 

// clk0
always
begin
	clk0 = 1'b0;
	clk0 = #500000 1'b1;
	#500000;
end 

// clk1
initial
begin
	clk1 = 1'b1;
	# 500000;
	repeat(49)
	begin
		clk1 = 1'b0;
		clk1 = #500000 1'b1;
		# 500000;
	end
	clk1 = 1'b0;
end 
endmodule

